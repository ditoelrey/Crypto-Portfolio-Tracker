@model CryptoApp.Domain.Models.Cryptocurrency

@{
    ViewData["Title"] = "Sell Cryptocurrency";
}

<div class="container mt-4">
    <div class="alert alert-info">
        <h5>Your Current Holdings</h5>
        <p>You currently have <strong>@ViewBag.CurrentHolding.ToString("0")</strong> @Model.Symbol.ToUpper() available to sell</p>
        
    </div>

    <div class="card">
        <div class="card-body">
            <h2 class="card-title">Sell @Model.Name (@Model.Symbol.ToUpper())</h2>
            
            <form asp-action="Sell" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" name="portfolioId" value="@ViewBag.PortfolioId" />                
                <div class="mb-3">
                    <label for="quantity" class="form-label">Number of Coins to Sell</label>
                    <input type="number" class="form-control" id="quantity" name="quantity" 
                           min="1" max="@ViewBag.CurrentHolding" step="1" required />
                    <small class="form-text text-muted">Enter whole number of coins to sell (e.g. 1, 2, 3)</small>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-danger">Confirm Sale</button>
                    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>        async function getCurrentPrice() {
            try {
                const response = await fetch(`/Crypto/GetPrice/@Model.Id`);
                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.error || 'Failed to fetch price');
                }
                document.getElementById('price').value = data.price.toFixed(2);
                updateTotal();
            } catch (error) {
                console.error('Error fetching price:', error);
                alert('Error fetching current price. Please try again.');
            }
        }

        function updateTotal() {
            const quantity = parseFloat(document.getElementById('quantity').value) || 0;
            const price = parseFloat(document.getElementById('price').value) || 0;
            const total = (quantity * price).toFixed(2);
            document.getElementById('totalValue').textContent = total;
        }

        // Update total when inputs change
        document.getElementById('quantity').addEventListener('input', updateTotal);
        document.getElementById('price').addEventListener('input', updateTotal);

        // Get current price when page loads
        document.addEventListener('DOMContentLoaded', getCurrentPrice);
    </script>
}
