@model IEnumerable<CryptoApp.Domain.Models.Transaction>

@{
    ViewData["Title"] = "Transaction History";
}

<div class="container mt-4">
    <h1>Transaction History</h1>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Cryptocurrency</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.OrderByDescending(t => t.Date))
                        {
                            <tr>
                                <td>@transaction.Date.ToLocalTime().ToString("g")</td>
                                <td>@transaction.Cryptocurrency.Symbol.ToUpper()</td>
                                <td>
                                    <span class="badge @(transaction.Type == TransactionType.Buy ? "bg-success" : "bg-danger")">
                                        @transaction.Type
                                    </span>
                                </td>
                                <td>@transaction.Amount.ToString("0")</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" onclick="deleteTransaction('@transaction.Id')">Delete</button>
                                </td>
                            </tr>
                        }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        async function deleteTransaction(transactionId) {
            if (confirm('Are you sure you want to delete this transaction? This action cannot be undone.')) {
                try {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const response = await fetch(`/Portfolio/DeleteTransaction/${transactionId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        const error = await response.text();
                        alert('Error deleting transaction: ' + error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error deleting transaction. Please try again.');
                }
            }
        }
    </script>
    @Html.AntiForgeryToken()
}
